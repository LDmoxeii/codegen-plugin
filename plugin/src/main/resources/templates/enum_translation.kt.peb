package {{ basePackage }}{{ templatePackage }}{{ package }}
{%- for import in imports %}
{{ import }}
{%- endfor %}

/**
 * 由[cap4k-ddd-codegen-gradle-plugin]生成
 * 警告：请勿手动修改本文件，后续生成会覆盖当前文件
 */
@TranslationType(type = {{ TranslationTypeConst }})
@Component
class {{ EnumTranslation }} :
    TranslationInterface<String>, BatchTranslationInterface<String> {

    companion object {
        const val {{ TranslationTypeConst }} = "{{ TranslationTypeValue }}"
    }

    override fun translation(key: Any, other: String): String? {
        val code = when (key) {
            is Number -> key.toInt()
            is String -> key.toIntOrNull()
            else -> null
        } ?: return null
        return {{ Enum }}.valueOfOrNull(code)?.{{ EnumNameField }}
    }

    override fun translationBatch(keys: Collection<Any>, other: String): Map<Any, String?> {
        if (keys.isEmpty()) return emptyMap()

        val keyToCode: Map<Any, Int?> = keys.associateWith { k ->
            when (k) {
                is Number -> k.toInt()
                is String -> k.toIntOrNull()
                else -> null
            }
        }

        val codes: Set<Int> = keyToCode.values.filterNotNull().toSet()

        val codeToDesc: Map<Int, String?> = codes.associateWith { c ->
            {{ Enum }}.valueOfOrNull(c)?.{{ EnumNameField }}
        }

        return keyToCode.mapValues { (_, c) -> c?.let { codeToDesc[it] } }
    }
}

